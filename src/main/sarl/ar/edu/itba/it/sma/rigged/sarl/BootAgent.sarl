package ar.edu.itba.^it.sma.rigged.sarl

import java.util.List
import java.util.ArrayList
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Schedules
import io.sarl.core.Logging
import ar.edu.itba.^it.sma.rigged.sarl.support.Resource
import ar.edu.itba.^it.sma.rigged.sarl.support.Desire
import ar.edu.itba.^it.sma.rigged.sarl.support.LessThanResourceComparator
import ar.edu.itba.^it.sma.rigged.sarl.support.MoreThanResourceComparator
import ar.edu.itba.^it.sma.rigged.sarl.support.Proposal
import java.util.UUID

agent BootAgent {
	uses DefaultContextInteractions, Lifecycle, Schedules, Logging

	val resources = new ArrayList<Resource>()
	var electoralCommitteeUUID : UUID

	on Initialize {
		electoralCommitteeUUID = spawn(ElectoralCommitteeAgent, 4000, 1)
		generateResources()
		generateVoters
		generateCandidates
	}

	def generateResources() {
		resources.add(new Resource("Economía", 100))
		resources.add(new Resource("Educación", 100))
		resources.add(new Resource("Salud", 100))
		resources.add(new Resource("Infraestrutura", 100))		
	}

	def generateVoters() {
		spawnVoter("Voter1", #[
			new Desire(resources.get(0), new LessThanResourceComparator(100)),
			new Desire(resources.get(1), new LessThanResourceComparator(100)),
			new Desire(resources.get(2), new LessThanResourceComparator(100)),
			new Desire(resources.get(3), new LessThanResourceComparator(100))
		])
		spawnVoter("Voter2", #[
			new Desire(resources.get(0), new MoreThanResourceComparator(100)),
			new Desire(resources.get(1), new MoreThanResourceComparator(100)),
			new Desire(resources.get(2), new MoreThanResourceComparator(100)),
			new Desire(resources.get(3), new MoreThanResourceComparator(100))
		])
		spawnVoter("Voter3", #[
			new Desire(resources.get(0), new LessThanResourceComparator(100)),
			new Desire(resources.get(1), new LessThanResourceComparator(100)),
			new Desire(resources.get(2), new MoreThanResourceComparator(100)),
			new Desire(resources.get(3), new MoreThanResourceComparator(100))
		])
		spawnVoter("Voter4", #[
			new Desire(resources.get(0), new MoreThanResourceComparator(100)),
			new Desire(resources.get(1), new MoreThanResourceComparator(100)),
			new Desire(resources.get(2), new LessThanResourceComparator(100)),
			new Desire(resources.get(3), new LessThanResourceComparator(100))
		])
	}
	
	def spawnVoter(voterName : String, desires : Desire[]) {
		var desiresList : List<Desire> = desires; 
		spawn(VoterAgent, voterName, desires)
	}

	def generateCandidates {
		println("Spawining Candidate1")
		spawnCandidate("Candidate1", #[
			new Proposal(#[
				new Resource(resources.get(0).getName(), 120),
				new Resource(resources.get(1).getName(), 120),
				new Resource(resources.get(2).getName(), 120),
				new Resource(resources.get(3).getName(), 120)
			])
		])
		println("Spawining Candidate2")
		spawnCandidate("Candidate2", #[
			new Proposal(#[
				new Resource(resources.get(0).getName(), 80),
				new Resource(resources.get(1).getName(), 80),
				new Resource(resources.get(2).getName(), 80),
				new Resource(resources.get(3).getName(), 80)
			])
		])
		println("Spawining Candidate3")
		spawnCandidate("Candidate3", #[
			new Proposal(#[
				new Resource(resources.get(0).getName(), 80),
				new Resource(resources.get(1).getName(), 120),
				new Resource(resources.get(2).getName(), 80),
				new Resource(resources.get(3).getName(), 120)
			])
		])
	}
	
	def spawnCandidate(candidateName : String, proposals : Proposal[]) {
		var proposalList : List<Proposal> = proposals;
		spawn(CandidateAgent, candidateName, electoralCommitteeUUID, proposalList)
	}
}